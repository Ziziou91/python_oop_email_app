import math

class color:
    purple = '\033[95m'
    cyan = '\033[96m'
    darkcyan = '\033[36m'
    blue = '\033[94m'
    green = '\033[92m'
    yellow = '\033[93m'
    red = '\033[91m'
    bold = '\033[1m'
    underline = '\033[4m'
    end = '\033[0m'

def create_char_line(char:str="-", count:int=79) -> str:
    """Prints a line of characters for formatting in the terminal."""
    return(f"{char*count}")

def create_table_cell(item:str, cell_width:int) -> str:
    """Creates each cell to populate a table of values generated by create_line."""
    spacing = (cell_width - len(str(item))) / 2
    if spacing.is_integer():
        return f"{' '*int(spacing)}{item}{' '*int(spacing)}"
    else:
        return f"{' '*int(math.floor(spacing))}{item}{' '*int(math.ceil(spacing))}"

def create_table_row(num:str="Number", subject: float="Subject") -> str:
    """Creates each line in a table of menu items, prices, stock and stock value."""
    # TODO - needs to work back from cell width and find first space - will avoid splitting mid-word
    formatted_str = subject[0:60]
    table_row = f"|{create_table_cell(num, 16)}|{create_table_cell(formatted_str, 60)}|"
    
    #Â if 'subject' is wider than the cell width the code below will provide new lines
    if len(subject) > 60:
        formatted_str = subject[60:]
        rem_subject_length = len(subject) - 60
    
        while rem_subject_length > 0:
            table_row += f"\n|{create_table_cell("", 16)}|{create_table_cell(formatted_str, 60)}|"
            rem_subject_length = len(formatted_str) - 60
            if len(formatted_str) > 60:
                formatted_str = formatted_str[60:]
    
    return table_row

def create_title(title_str:str, line_width:int=79) -> str:
    """draws a box that includes a title string to help the user navigate through the app."""
    box_length = 22
    internal_space = int((box_length-len(title_str))/2)
    outside_space = int((line_width/2) - (box_length/2))
    if len(title_str) % 2:
        return f"{" "*outside_space}{'-'*24}\n{" "*outside_space}|{' '*internal_space}{title_str}{' '*(internal_space+1)}|\n{" "*outside_space}{'-'*24}"
    else:
        return f"{" "*outside_space}{'-'*24}\n{" "*outside_space}|{' '*internal_space}{title_str}{' '*(internal_space)}|\n{" "*outside_space}{'-'*24}"
